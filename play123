#!/bin/bash

DRIVER=mpg123
DRIVEROPT="-R"
PROGRAM=${0##*/}
ROOT=$HOME/.$PROGRAM
DAEMONPIPE=$ROOT/daemonpipe
DRIVERPIPE=$ROOT/driverpipe
QUEU=$ROOT/queu
STATE=$ROOT/state

CURL=/usr/bin/curl
BROWSER=/usr/bin/iceweasel
NETCAT=/bin/nc
SPOTIFYCLIENT=spotify
SPOTIFYID=c7548bbf61a44423b363f22db048a593
SPOTIFYSECRET=b572aed5a8354a738158d655cfa0a661
SPOTIFYTOKEN=$ROOT/spotifytoken
SPOTIFYAUTHPIPE=$ROOT/spotifypipe
SPOTIFYAUTHURL="https://accounts.spotify.com/"
SPOTIFYAPIURL="https://api.spotify.com/"
SPOTIFYLOCALAUTHPORT=12321
SPOTIFYLOCALAUTHURL="http://localhost:${SPOTIFYLOCALAUTHPORT}/callback"

PLAYCMD="play" # command that frontend sends to daemon
PLAYOPT=""
UNPARSEDSEEK=""
SPOTIFYMODE=""
SPOTIFYCMD=""

REMOTEUSER=""
REMOTEHOST=""

# default volume, volume is also reset to this every time daemon is restarted (to avoid situations where a muted player seems like it isnt working)
VOLUME=50

debug() {
  echo "DRIVER: " $DRIVER
  echo "DRIVEROPT: " $DRIVEROPT
  echo "PROGRAM: " $PROGRAM
  echo "ROOT: " $ROOT
  echo "DAEMONPIPE: " $DAEMOMPIPE
  echo "DRIVERPIPE: " $DRIVERPIPE
  echo "QUEU: " $QUEU
  echo "STATE: " $STATE
  echo "DAEMONCMD: " $DAEMONCMD
  echo "PLAYCMD: " $PLAYCMD
  echo "PLAYOPT: " $PLAYOPT
  echo "REMOTEHOST: " $REMOTEHOST
  echo "REMOTEPORT: " $REMOTEPORT
  echo "REMOTEUSER: " $REMOTEUSER
  echo "VOLUME: " $VOLUME
}


#####################
# Daemon functions
#####################
set_volume() {
  sign=`echo $1 | sed -e 's/[0-9][0-9]*//'`
  incr=`echo $1 | sed -e 's/[-+]//'`

  VOLUME=`grep 'volume' $STATE | awk '{print $2}'`

  case $sign in
    "+")
      VOLUME=$(($VOLUME+$incr))
      ;;
    "-")
      VOLUME=$(($VOLUME-$incr))
      ;;
    "")
      VOLUME=$1
      ;;
    "*")
      echo "Warning: sign of volume not recognised, ignoring"
      ;;
  esac

  if [ $VOLUME -gt 100 ]
  then
    VOLUME=100
  fi

  if [ $VOLUME -lt 0 ]
  then
    VOLUME=0
  fi

  sed -i "s/volume.*/volume $VOLUME/" $STATE
}


get_marked() {
  file=$1

  awk 'BEGIN{found=0;last_file="";}
{
  last_file=$1; 
  if (NF==2 && found==0) {
    print NR, last_file;found=1;
  }
}
END{if (found==0){print NR, last_file}}' $file
}


move_queu_mark() {
  mode=$1
  # can be: "last", "prev" or "next"


  temp=${QUEU}.temp
  cat $QUEU | uniq | awk '{if (NF>=1){print}}' > $temp

  # current mark
  current=$((`get_marked $temp | awk '{print $1}'`))

  # last possible mark
  last=$((`wc -l $temp | awk '{print $1}'`))
  # last line
  if [ $mode == "last" ]
  then
    line=$last
  elif [ $mode == "prev" ]
  then
    line=$((current-1))
  elif [ $mode == "next" ]
  then
    line=$((current+1))
  else
    echo "Error: mode $mode not recognized in function move_queu_mark()"
    exit 1
  fi

  # wrap around
  if [ $line -gt $last ]
  then
    line=1
  fi
  if [ $line -le 0 ]
  then
    line=$last
  fi

  awk "BEGIN{line=$line} {
if (NR>=1) {
  if (NR==line) {
    print \$1, \"*\";
  } else {
    print \$1;
  }
}
}" $temp | uniq > $QUEU

  rm $temp
}


add_to_queu() {
  for arg in $@
  do
    file=$arg
    last_file=`tail -1 $QUEU | awk '{print $1}'`
    if [ ! $last_file == $file ] || [ -z $last_file ]
    then
      echo $file >> $QUEU
    fi
  done
}


run_play_cmd() {
  case "$PLAYCMD" in
    "seek")
      echo "JUMP $PLAYOPT" > $DRIVERPIPE
      ;;
    "vol")
      set_volume $PLAYOPT
      echo "VOLUME $VOLUME" > $DRIVERPIPE
      ;;
    "next")
      move_queu_mark "next"
      play_marked
      ;;
    "prev")
      move_queu_mark "prev"
      play_marked
      ;;
    "repeat")
      play_marked
      ;;
    "load")
      add_to_queu ${PLAYOPT%% *}
      move_queu_mark "last"
      add_to_queu ${PLAYOPT#* }
      play_marked
      ;;
    "play")
      echo "PAUSE" > $DRIVERPIPE
      ;;
    "*")
      echo "Warning: cmd not recognized, ignoring"
      ;;

  esac
}


is_file() {
  if [ ! -f $1 ]
  then
    >&2 echo "Error: file \"$1\" not found"
    exit 1
  fi
}


load_playlist() {
  is_file $1

  echo "LOADLIST 1 $1" > $DRIVERPIPE
}


load_file() {
  is_file $1

  echo "LOAD $1" > $DRIVERPIPE
}


load_file_or_playlist() {
  ext=${1#*.}
  
  file=$1

  if [ $ext = "m3u" ]
  then
    load_playlist $file
  else
    load_file $file
  fi
}


play_marked() {
  marked=`get_marked $QUEU | awk '{print $2}'`

  if [ -f $marked ]
  then
    load_file_or_playlist $marked
  fi
}


# keep the driverpipe open
loop_driver_input_writer() {
  while true
  do
    sleep 1
  done > $DRIVERPIPE
}


# stdin of this process is stdout of mpg123
loop_driver_output_reader() {
  first_run=true
  while read line
  do
    if [ "$line" == "@P 0" ]
    then
      if $first_run
      then
        echo "repeat" > $DAEMONPIPE
        first_run=false
      else
        echo "next" > $DAEMONPIPE
      fi
    fi
  done
}


loop_daemon() {
  while true
  do
    sleep 0.1 # needed because daemonpipe will always contain an EOF, and read will always return immediately
    read line
    if [ ! "$line" == "" ]
    then
      PLAYCMD=`echo $line | awk '{print $1}'`
      PLAYOPT=`echo $line | sed 's/[a-z]*\ *//'`

      run_play_cmd
    fi
  done < $DAEMONPIPE
}


assert_installed() {
  if [ -z $1 ]
  then
    echo "Error: " $1 " not installed"
    exit 1
  fi
}


assert_root_directory() {
  if [ ! -d $ROOT ]
  then
    mkdir $ROOT
  fi
}


assert_necessary_files() {
  assert_root_directory

  if [ ! -p $DAEMONPIPE ]
  then
    mkfifo $DAEMONPIPE
  fi

  assert_installed $DRIVER

  if [ ! -p $DRIVERPIPE ]
  then
    mkfifo $DRIVERPIPE
  fi

  if [ ! -f $QUEU ]
  then
    touch $QUEU
  fi

  if [ ! -f $STATE ]
  then
    echo "volume $VOLUME" > $STATE
  fi

  sed -i "s/volume.*/volume\\ $VOLUME/" $STATE
}


assert_daemon() {
  # dont count ourself
  ps_count=`ps -u $USER | grep $PROGRAM | wc -l` # this forks, so we will count ourselves twice anyway
  if [ $ps_count -eq 2 ] # this will become the daemon instance
  then
    assert_necessary_files

    is_driver_running=`ps -u $USER | grep $DRIVER | wc -l`
    if [ $is_driver_running -eq 0 ]
    then
      loop_driver_input_writer & # is needed to keep DRIVERPIPE open at all times

      echo "VOLUME $VOLUME" >  $DRIVERPIPE & # previous instance of mpg123 will have forgotten
      $DRIVER $DRIVEROPT < $DRIVERPIPE | loop_driver_output_reader &
    fi

    loop_daemon &
  fi
}


#####################
# Front-end functions
#####################
print_help() {
  echo -e "Usage: $PROGRAM [seek [+-]<seconds> | vol [+-]<%-pt> " \
    "| next | prev | repeat | info] [-h] [<file(s)>]\n"\
          "  No args: pause/play\n" \
          "  Daemon is asserted to be running\n" \
          "  If multiple commands are given, last one is used\n"
}


parse_seek_time() {
  sign=`echo $1 | sed -e 's/[0-9][0-9]*//'`

  if [ "$sign" != "-" ] && [ "$sign" != "+" ] && [ -n "$sign" ]
  then
    echo "Error: seek time sign must be + or -"
    print_help
    exit 1
  fi

  seconds=`echo $1 | sed -e 's/[-+]//'`
  frames_per_second=38 # one frame is 0.026 seconds, so 38 frames per second
  frames=$(($seconds * $frames_per_second))

  PLAYOPT="$sign$frames"
}


set_seek_cmd() {
  if [ $# -eq 0 ]
  then
    echo "Error: seek command requires argument"
    print_help
    exit 1
  fi

  UNPARSEDSEEK=$1
  PLAYCMD="seek"
  parse_seek_time $UNPARSEDSEEK
}


set_vol_cmd() {
  if [ $# -eq 0 ]
  then
    echo "Error: vol command requires arguments"
    print_help
    exit 1
  fi

  PLAYCMD="vol"
  PLAYOPT="$1"
}


set_next_cmd() {
  PLAYCMD="next"
  PLAYOPT=""
  SPOTIFYMODE="POST"
  SPOTIFYCMD="v1/me/player/next"
}


set_prev_cmd() {
  PLAYCMD="prev"
  PLAYOPT=""
  SPOTIFYMODE="POST"
  SPOTIFYCMD="v1/me/player/previous"
}


set_repeat_cmd() {
  PLAYCMD="repeat"
  PLAYOPT=""
  SPOTIFYMODE="PUT"
  SPOTIFYCMD="v1/me/player/seek?position_ms=0"
}


set_ssh_remote() {
  str=`grep "remote" $STATE | tail -1 | awk '{print $2}'`

  if [ ! "$str" == "" ]
  then
    has_at="`echo $str | grep '@'`"

    if [ -z $has_at ]
    then
      echo "Error: remote in $STATE not in correct form"
      exit 1
    fi

    REMOTEUSER=`echo $str | sed 's/@.*//'`
    REMOTEHOST=`echo $str | sed -e 's/.*@//' -e 's/:.*//'`

    if [ -z $REMOTEUSER ] || [ -z $REMOTEHOST ]
    then
      echo "Error: unable to parse remote in $STATE"
      exit 1
    fi
  fi
}


detect_stray_option() {
  is_option="`echo $1 | grep '^[-\+]'`"
  if [ ! "$is_option" == "" ]
  then
    echo "Error: option $1 not recognized"
    print_help
    exit 1
  fi
}


set_load_cmd() {
  if [ "$PLAYCMD" != "load" ]
  then
    PLAYCMD="load"
    PLAYOPT=""
  fi
  
  file=`readlink -f $1`

  if [ ! -f $file ]
  then
    echo "Error: file $file not found"
    exit 1
  fi

  PLAYOPT="$PLAYOPT $file"
}


encode_uri() {
  nodejs -e "console.log(encodeURIComponent(\"$1\"))"
}


decode_uri() {
  nodejs -e "console.log(decodeURIComponent(\"$1\"))"
}


spotify_download_token() {
  URL=${SPOTIFYAUTHURL}"api/token"

  OPT=""
  if [ $# -eq 1 ]
  then
    OPT=${OPT}" -d grant_type=authorization_code"
    OPT=${OPT}" -d code="$(encode_uri "$1")
    OPT=${OPT}" -d redirect_uri="$(encode_uri "$SPOTIFYLOCALAUTHURL")
  elif [ $# -eq 0 ]
  then
    OPT=${OPT}" -d grant_type=client_credentials"
  else
    echo "Internal Error: bad number of arguments to spotify_download_token function"
    exit 1
  fi

  $CURL -s -X "POST" $OPT --basic -u ${SPOTIFYID}:${SPOTIFYSECRET} $URL > $SPOTIFYTOKEN

  if [ $? -ne 0 ]
  then
    echo "Error: spotify connectivity problem"
    exit 1
  fi

  if [ `grep "error" $SPOTIFYTOKEN | wc -l` -gt 0 ]
  then
    echo "Error: bad spotify client credentials or no connectivity"
    exit 1
  fi
}



spotify_authenticate() {
  # fork netcat (keeps listening until browser closes page)
  $NETCAT -l -p $SPOTIFYLOCALAUTHPORT > $SPOTIFYAUTHPIPE &
  
  # direct browser to spotify login
  URL=${SPOTIFYAUTHURL}"authorize?"
  URL=${URL}"client_id="$(encode_uri $SPOTIFYID)
  URL=${URL}"&response_type=code"
  URL=${URL}"&redirect_uri="$(encode_uri "$SPOTIFYLOCALAUTHURL")
  URL=${URL}"&scope="$(encode_uri "user-modify-playback-state user-read-playback-state")

  $BROWSER $URL

  CODE=""
  while true
  do
    sleep 0.1 # needed because daemonpipe will always contain an EOF, and read will always return immediately
    read line
    if [ ! "$line" == "" ]
    then
      if [ `echo $line | grep "GET" | wc -l` -gt 0 ]
      then
        CODE=`echo $line | sed -e "s/.*GET\ .*\?code=\([a-zA-Z0-9_=\-]*\).*/\1/"`
        break
      fi
    fi
  done < $SPOTIFYAUTHPIPE

  spotify_download_token $CODE
}


spotify_assert_files() {
  # similar to assert_necessary_files
  assert_root_directory

  if [ ! -p $SPOTIFYAUTHPIPE ]
  then
    mkfifo $SPOTIFYAUTHPIPE
  fi

  if [ ! -f $SPOTIFYTOKEN ]
  then
    spotify_authenticate
  fi
}


spotify_extract_token_field() {
  key=$1

  sed "s/[\{\"}:,]/\ /g" $SPOTIFYTOKEN | awk "{
  for (i=2; i <= NF; i++) {
    if (\$(i-1) == \"$key\") {
      print \$i
    }
  }
}"
}


spotify_refresh_token() {
  token=`spotify_extract_token_field "refresh_token"`

  URL=${SPOTIFYAUTHURL}"api/token?"
  URL=${URL}"grant_type=refresh_token"
  URL=${URL}"&refresh_token="$token
  URL=${URL}"&redirect_uri="$(encode_uri "$SPOTIFYLOCALAUTHURL")

  $CURL -s -X "POST" --basic -u ${SPOTIFYID}:${SPOTIFYSECRET} $URL > $SPOTIFYTOKEN

  if [ $? -ne 0 ]
  then
    echo "Error: spotify refresh token connectivity problem"
    exit 1
  fi

  if [ `grep "error" $SPOTIFYTOKEN | wc -l` -gt 0 ]
  then
    echo "Error: bad spotify client credentials or no connectivity for refresh token"
    exit 1
  fi
}


spotify_assert_token() {
  # extract the expires_in field from the token 
  delay=`spotify_extract_token_field "expires_in"`

  # token modification/creation date
  created=`stat -c %y $SPOTIFYTOKEN`
  created=`date '+%s' -d "$created"`

  expiry=$(($created + $delay))

  now=`date '+%s'`

  if [ $now -gt $expiry ]
  then
    spotify_download_token
  fi
}


spotify_send_command() {
  bearer=`spotify_extract_token_field "access_token"`
  $CURL -s -X "$1" -H "Authorization: Bearer $bearer" $2
}


spotify_set_play_cmd() {
  URL=$SPOTIFYAPIURL"v1/me/player/currently-playing"

  is_playing=`spotify_send_command "GET" $URL | sed -n -e 's/.*\"is_playing\"\ *\:\ *\(true\|false\).*/\1/p'`

  if [ "$is_playing" == "true" ]
  then
    SPOTIFYMODE="PUT"
    SPOTIFYCMD="v1/me/player/pause"
  else
    SPOTIFYMODE="PUT"
    SPOTIFYCMD="v1/me/player/play"
  fi
}


spotify_set_seek_cmd() {
  URL=$SPOTIFYAPIURL"v1/me/player/currently-playing"
  progress=$(spotify_send_command "GET" $URL | sed -n -e 's/.*\"progress_ms\"\ *\:\ *\([0-9]*\).*/\1/p')

  if [ "$progress" != "" ]
  then
    sign=`echo $UNPARSEDSEEK | sed -e 's/[0-9][0-9]*//'`
    seconds=`echo $UNPARSEDSEEK | sed -e 's/[-+]//'`
    new_pos=$progress

    if [ "$sign" == "-" ]
    then
      new_pos=$(($progress - $(($seconds * 1000)) ))
    elif [ "$sign" == "+" ]
    then
      new_pos=$(($progress + $(($seconds * 1000)) ))
    else
      echo "Internal Error: this error should've been caught in set_seek_cmd()"
      exit 1
    fi

    SPOTIFYMODE="PUT"
    SPOTIFYCMD="v1/me/player/seek?position_ms="$new_pos
  else
    echo "Error: failed to seek spotify"
    exit 1
  fi
}


spotify_run_command() {
  URL=${SPOTIFYAPIURL}${SPOTIFYCMD}

  spotify_send_command $SPOTIFYMODE $URL
}


main() {
  set_ssh_remote

  if [ ! "$REMOTEHOST" == "" ] && [ ! "$REMOTEUSER" == "" ] 
  then
    assert_installed ssh
    ssh $REMOTEUSER@$REMOTEHOST $PROGRAM $@
    code=$?

    if [ $code -ne 0 ]
    then
      echo "Error: ssh returned $code"
      exit $code
    fi

  else 
    # loop the arguments
    while [ $# -ne 0 ]
    do
      arg=$1
      shift

      case "$arg" in
        "seek")
          set_seek_cmd $@
          shift
          ;;
        "vol")
          set_vol_cmd $@
          shift
          ;;
        "next")
          set_next_cmd
          ;;
        "prev")
          set_prev_cmd
          ;;
        "repeat")
          set_repeat_cmd
          ;;
        "info")
          get_marked $QUEU
          exit 0
          ;;
        "-h")
          print_help
          exit 0
          ;;
        *)
          detect_stray_option $arg
          set_load_cmd $arg
          ;;
      esac
    done

    spotify_running=`ps -u $USER | grep $SPOTIFYCLIENT | wc -l`
    if [ $spotify_running -gt 0 ]
    then
      spotify_assert_files
      spotify_assert_token

      if [ "$PLAYCMD" == "play" ]
      then
        spotify_set_play_cmd
      elif [ "$PLAYCMD" == "seek" ]
      then
        spotify_set_seek_cmd
      fi

      spotify_run_command
    else
      assert_daemon
      echo $PLAYCMD $PLAYOPT > $DAEMONPIPE &
    fi
  fi
}


main $@
