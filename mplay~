#!/bin/bash
# wrapper around mpg321


DIR=$HOME/.mplay
PIPE=$DIR/pipe
PLAYER=mpg123
OPTS="-R"
MODE=""
FILE=""
VOLUME=$DIR/volume
QUEU=$DIR/queu


assert_dir() {
  if [ ! -d $DIR ]
  then
    mkdir $DIR
  fi
}


assert_pipe() {
  if [ ! -p $PIPE ]
  then
    mkfifo $PIPE
  fi
}


assert_open() {
  tail -f > $PIPE &
}


assert_volume() {
  if [ ! -f $VOLUME ]
  then
    echo "50" > $VOLUME
  fi

  volume=`cat $VOLUME`

  re='^[0-9]+$'

  if ! [[ $volume =~ $re ]]
  then
    echo "50" > $VOLUME
  else
    if [ $volume -lt 0 ]
    then
      echo "0" > $VOLUME
    elif [ $volume -gt 100 ]
    then
      echo "100" > $VOLUME
    fi
  fi
}


set_vol() {
  echo "VOLUME `cat $VOLUME`" > $PIPE
}


assert_player() {
  ps_count=`ps -C $PLAYER | wc -l`

  if [ $ps_count -eq 1 ] 
  then
    assert_open

    $PLAYER $OPTS < $PIPE &> /dev/null &
  elif [ $ps_count -gt 2 ]
  then
    echo "Too many instances of $PLAYER"
    exit 1
  fi
}


assert_all() {
  assert_dir

  assert_pipe

  assert_player

  assert_volume
}


seek_back() {
  echo "jump -$1" > $PIPE
}


seek_forward() {
  echo "jump +$1" > $PIPE
}


vol_up() {
  old_volume=`cat $VOLUME`
  new_volume=$(($old_volume+10))

  if [ $new_volume -gt 100 ]
  then
    new_volume=100
  fi

  echo "$new_volume" > $VOLUME
}


vol_down() {
  old_volume=`cat $VOLUME`
  new_volume=$(($old_volume-10))

  if [ $new_volume -lt 0 ]
  then
    new_volume=0
  fi

  echo "$new_volume" > $VOLUME
}


is_file() {
  if [ ! -f $1 ]
  then
    >&2 echo "Error: file \"$1\" not found"
    exit 1
  fi
}


# returns two fields:
#  line number of mark
#  file of mark
# if no mark is found then the last line number and file is returned
# input is a file, so that it can work with temp files
get_marked() {
  file=$1

  marked=`awk 'BEGIN{found=false;last_file="";}
{
  last_file=$1; 
  if (NF==2 && !found) {
    print NR, last_file;found=true;
  }
}
END{if (!found){print NR, last_file}}' $file`

  echo $marked
}


# possible modes:
#   "last"
#   "prev"
#   "next"
move_queu_mark() {
  mode=$1

  # rewrite the queue, take this opportunity to clean the queu as well
  temp=${QUEU}.temp
  cat $QUEU | uniq | awk '{if (NF>=1){print}}' > $temp

  # current mark
  current=`get_marked $temp | awk '{print $1}'`

  # last possible mark
  last=$((`wc -l $temp | awk '{print $1}'`))
  # last line
  if [ $mode == "last" ]
  then
    line=$last
  elif [ $mode == "prev" ]
  then
    line=$((current-1))
  elif [ $mode == "next" ]
  then
    line=$((current+1))
  else
    echo "mode $mode not recognized in function move_queu_mark()"
    exit 1
  fi

  # bound the line
  if [ $line -gt $last ]
  then
    line=$last
  fi
  if [ $line -le 0 ]
  then
    line=1
  fi

  awk "BEGIN{line=$line} {
if (NR>=1) {
  if (NR==line) {
    print \$1, \"*\";
  } else {
    print \$1;
  }
}
}" $temp | uniq > $QUEU
}


queu_file_or_playlist() {
  file=`readlink -f $1`
  echo $file >> $QUEU

  move_queu_mark "last" 
  
  load_file_or_playlist $1
}


load_file_or_playlist() {
  ext=${1#*.}
  
  file=`readlink -f $1`

  if [ $ext = "m3u" ]
  then
    load_playlist $file
  else
    load_file $file
  fi
}


# only plays first song
# TODO
load_playlist() {
  is_file $1

  echo "LOADLIST 1 $1" > $PIPE
}


load_file() {
  is_file $1

  echo "LOAD $1" > $PIPE
}


toggle_pause() {
  echo "PAUSE" > $PIPE
}


play_marked() {
  marked=`get_marked $QUEU | awk '{print $2}'`

  if [ -f $marked ]
  then
    load_file_or_playlist $marked
  fi
}


repeat_last() {
  play_marked
}


play_next() {
  move_queu_mark "next"
  play_marked
}


play_prev() {
  move_queu_mark "prev"
  play_marked
}


show_help() {
  echo -e "\nUsage: ${0##*/} [FILE | < | > | [ | ] | - | + | r]\n" \
          "  no arguments : pause/play\n" \
          "  < : jump -1min\n" \
          "  > : jump +1min\n" \
          "  [ : jump -5min\n" \
          "  ] : jump +5min\n" \
          "  - : vol  -10% \n" \
          "  + : vol  +10% \n" \
          "  r : repeat last file \n" \
          "  n : play next file \n" \
          "  p : play prev file \n" \
          "\nTip: make playlists with mp3wrap\n" \
          "   mp3wrap OUTPUTFILE file1 file2 ...\n"
}


# one frame is 0.026 seconds
# one second is 38 frames
# one minute is 2308 frames
# five minutes is 11538 frames
main() {
  if [ $# -gt 1 ]
  then
    >&2 echo "Error: too many arguments"
    show_help
    exit 1
  else
    assert_all

    if [ $# -eq 1 ]
    then
      case "${1}" in
        "<")
          seek_back 2308
          ;;
        ">")
          seek_forward 2308
          ;;
        "[")
          seek_back 11538
          ;;
        "]")
          seek_forward 11538
          ;;
        "-")
          vol_down
          ;;
        "+")
          vol_up
          ;;
        "r")
          repeat_last
          ;;
        "n")
          play_next
          ;;
        "p")
          play_prev
          ;;
        "-h")
          show_help
          exit 0
          ;;
        *)
          queu_file_or_playlist $1
          ;;
      esac
    else
      toggle_pause
    fi

    set_vol
  fi
}


main $@
